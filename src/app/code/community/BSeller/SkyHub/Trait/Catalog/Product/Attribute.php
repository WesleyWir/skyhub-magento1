<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BSeller
 * @package   BSeller_SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 */
trait BSeller_SkyHub_Trait_Catalog_Product_Attribute
{
    
    /** @var Mage_Eav_Model_Resource_Entity_Attribute_Collection */
    protected $attributeCollection;
    
    /** @var array */
    protected $productAttributes   = [];
    
    /** @var array */
    protected $attributesWhitelist = [];
    
    /** @var array */
    protected $entityTypes         = [];
    
    /** @var Mage_Catalog_Model_Product */
    protected $product;
    
    
    /**
     * @param string $attributeCode
     *
     * @return bool
     */
    protected function getAttributeByCode($attributeCode)
    {
        $this->initProductAttributes();
        
        if (!isset($this->productAttributes[$attributeCode])) {
            return false;
        }
        
        return $this->productAttributes[$attributeCode];
    }
    
    
    /**
     * @param int $attributeId
     *
     * @return bool|Mage_Eav_Model_Entity_Attribute
     */
    protected function getAttributeById($attributeId)
    {
        $this->initProductAttributes();
        
        /** @var Mage_Eav_Model_Entity_Attribute $attribute */
        foreach ($this->productAttributes as $attribute) {
            if ($attributeId == $attribute->getId()) {
                return $attribute;
            }
        }
        
        return false;
    }
    
    
    /**
     * @return array
     */
    protected function getAllAttributeIds()
    {
        $attributeIds = [];
        
        /** @var Mage_Eav_Model_Entity_Attribute $attribute */
        foreach ($this->productAttributes as $attribute) {
            $attributeIds[$attribute->getId()] = $attribute;
        }
        
        return $attributeIds;
    }
    
    
    /**
     * @return array
     */
    protected function initProductAttributes()
    {
        if (!empty($this->productAttributes)) {
            return $this->productAttributes;
        }
        
        /** @var Mage_Eav_Model_Entity_Attribute $attribute */
        foreach ($this->getAllProductAttributes() as $attribute) {
            $this->productAttributes[$attribute->getAttributeCode()] = $attribute;
        }
        
        return $this->productAttributes;
    }


    /**
     * @return Mage_Eav_Model_Resource_Entity_Attribute_Collection
     */
    protected function getAllProductAttributes()
    {
        /** @var Mage_Eav_Model_Resource_Entity_Attribute_Collection $collection */
        $collection = Mage::getResourceModel('eav/entity_attribute_collection');
        $collection->setEntityTypeFilter($this->getEntityTypeId(Mage_Catalog_Model_Product::ENTITY));

        return $collection;
    }


    /**
     * @param Mage_Catalog_Model_Product|null $product
     * @param array                           $ids
     * @param array                           $excludeIds
     *
     * @return array
     */
    protected function getProductAttributes(
        Mage_Catalog_Model_Product $product = null,
        array $ids = [],
        array $excludeIds = []
    )
    {
        $this->initProductAttributes();
        
        $attributes = [];
        
        /**
         * @var string                          $code
         * @var Mage_Eav_Model_Entity_Attribute $attribute
         */
        foreach ($this->productAttributes as $code => $attribute) {
            if (!empty($ids) && !in_array($attribute->getId(), $ids)) {
                continue;
            }
            
            if (!empty($excludeIds) && in_array($attribute->getId(), $excludeIds)) {
                continue;
            }
            
            $attributes[$code] = $attribute;
        }
        
        return $attributes;
    }
    
    
    /**
     * @param string $code
     *
     * @return Mage_Eav_Model_Entity_Type
     */
    protected function getEntityTypeId($code)
    {
        if (isset($this->entityTypes[$code])) {
            return $this->entityTypes[$code];
        }
        
        /** @var Mage_Eav_Model_Entity_Type $type */
        $type = Mage::getModel('eav/entity_type');
        $type->loadByCode($code);
        
        $this->entityTypes[$code] = $type;
        
        return $type;
    }
    
    
    /**
     * @return array
     */
    protected function getProductAttributeWhitelist()
    {
        if (!$this->attributesWhitelist) {
            $this->attributesWhitelist = $this->initProductAttributes();
        }
        
        return $this->attributesWhitelist;
    }
    
    
    /**
     * @return array
     */
    protected function getProductAttributeBlacklist()
    {
        return [
            'entity_id',
            'special_price',
            'attribute_set_id',
            'options_container',
            'media_gallery',
            'thumbnail',
            'small_image',
            'image',
            'msrp_display_actual_price_type',
            'msrp_enabled',
            'special_from_date',
            'special_to_date',
            'updated_at',
            'created_at',
            'visibility',
            'url_path',
            'url_key',
            'entity_type_id',
            'type_id',
        ];
    }
    
    
    /**
     * @param string $attributeCode
     *
     * @return bool
     */
    protected function isAttributeCodeInBlacklist($attributeCode)
    {
        $blacklist = $this->getProductAttributeBlacklist();
        return in_array($attributeCode, $blacklist);
    }
    
    
    /**
     * @param string $attributeCode
     *
     * @return bool
     */
    protected function isAttributeCodeInWhiteList($attributeCode)
    {
        $whitelist = $this->getProductAttributeWhitelist();
        
        /** @var Mage_Eav_Model_Entity_Attribute $attribute */
        foreach ($whitelist as $attribute) {
            if ($attributeCode == $attribute->getAttributeCode()) {
                return true;
            }
        }
        
        return false;
    }
    
    
    /**
     * @param string $attributeId
     *
     * @return bool
     */
    protected function isAttributeIdInWhiteList($attributeId)
    {
        $whitelist = $this->getProductAttributeWhitelist();
        
        /** @var Mage_Eav_Model_Entity_Attribute $attribute */
        foreach ($whitelist as $attribute) {
            if ($attributeId == $attribute->getId()) {
                return true;
            }
        }
        
        return false;
    }
    
    
    /**
     * @param null|string|int|Mage_Catalog_Model_Product $product
     *
     * @return Mage_Catalog_Model_Product
     */
    protected function getProduct($product = null)
    {
        if ($product instanceof Mage_Catalog_Model_Product) {
            $this->product = $product;
            return $this->product;
        }

        if (!$product) {
            /** @var Mage_Catalog_Model_Resource_Product_Collection $collection */
            $collection = Mage::getResourceModel('catalog/product_collection');
            $collection->getSelect()->limit(1);

            /** @var Mage_Catalog_Model_Product $firstProduct */
            $firstProduct = $collection->getFirstItem();

            if ($firstProduct && $firstProduct->getId()) {
                return $firstProduct;
            }
        }

        /** @var Mage_Catalog_Model_Product $productModel */
        $productModel = Mage::getModel('catalog/product');
        
        if ($product) {
            if (!empty($product)) {
                $productModel->load((int) $product);
            }
    
            if (!$productModel->getId()) {
                $productModel->load((string) $product, 'sku');
            }
        }

        $this->product = $productModel;
        
        return $this->product;
    }
}
