<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BSeller
 * @package   BSeller_SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 */


class BSeller_SkyHub_Model_Support_Sales_Order_Create
{
    
    use BSeller_SkyHub_Trait_Customer;
    
    
    /** @var Mage_Core_Model_Store */
    private $store;
    
    /** @var array */
    private $orderData = [];
    
    /** @var Mage_Catalog_Model_Product */
    private $products;
    
    
    /**
     * BSeller_SkyHub_Model_Support_Sales_Order_Create constructor.
     *
     * @param null|Mage_Core_Model_Store $store
     *
     * @throws Mage_Core_Model_Store_Exception
     */
    public function __construct($store = null)
    {
        $data = [
            'session' => [
                'store_id' => $this->getStore($store)->getId(),
            ],
            'order'   => [
                'currency' => $this->getStore($store)->getCurrentCurrencyCode(),
            ],
        ];
        
        $this->merge($data);
    }
    
    
    /**
     * @param Varien_Object                $order
     * @param Mage_Customer_Model_Customer $customer
     *
     * @return $this
     */
    public function setOrderInfo(Varien_Object $order)
    {
        $data = [
            'order' => [
                'increment_id'      => $order['increment_id'],
                'send_confirmation' => $order['send_confirmation']
            ],
        ];
        
        $this->merge($data);
        
        return $this;
    }
    
    
    /**
     * @param null|string $comment
     *
     * @return $this
     */
    public function setComment($comment = null)
    {
        $data = [
            'order' => [
                'comment' => [
                    'customer_note' => $comment,
                ]
            ],
        ];
        
        $this->merge($data);
        
        return $this;
    }
    
    
    /**
     * @param Mage_Catalog_Model_Product $product
     * @param int                        $qty
     *
     * @return $this
     */
    public function addProduct(Mage_Catalog_Model_Product $product, $qty = 1)
    {
        $this->products[$product->getId()] = $product;
        
        $data = [
            'products' => [
                (int) $product->getId() => [
                    'qty' => (int) $qty
                ]
            ]
        ];
        
        $this->merge($data);
        
        return $this;
    }
    
    
    /**
     * @param string $method
     *
     * @return $this
     */
    public function setPaymentMethod($method = 'checkmo')
    {
        $data = [
            'payment' => [
                'method' => $method,
            ]
        ];
        
        $this->merge($data);
        
        return $this;
    }
    
    
    /**
     * @param string $method
     *
     * @return $this
     */
    public function setShippingMethod($method = 'flatrate_flatrate')
    {
        $data = [
            'order' => [
                'shipping_method' => $method,
            ]
        ];
        
        $this->merge($data);
        
        return $this;
    }
    
    
    /**
     * @param Mage_Customer_Model_Customer $customer
     *
     * @return $this
     */
    public function setCustomer(Mage_Customer_Model_Customer $customer)
    {
        $data = [
            'order' => [
                'account' => [
                    'group_id' => $customer->getGroupId(),
                    'email'    => $customer->getEmail()
                ]
            ],
            'session' => [
                'customer_id' => $customer->getId()
            ]
        ];
    
        $this->merge($data);
        
        return $this;
    }
    
    
    /**
     * @param string        $type
     * @param Varien_Object $address
     *
     * @return $this
     */
    public function addOrderAddress($type, Varien_Object $address)
    {
        $fullname = trim($address->getData('full_name'));
        
        /** @var Varien_Object $nameObject */
        $nameObject = $this->breakName($fullname);
        
        $street = [
            $address->getData('street'),
        ];
        
        $data = [
            'order' => [
                "{$type}_address" => [
                    'customer_address_id' => $address->getData('customer_address_id'),
                    'prefix'              => '',
                    'firstname'           => $nameObject->getData('firstname'),
                    'middlename'          => $nameObject->getData('middlename'),
                    'lastname'            => $nameObject->getData('lastname'),
                    'suffix'              => '',
                    'company'             => '',
                    'street'              => implode(' - ', $street),
                    'city'                => $address->getData('city'),
                    'country_id'          => $address->getData('country'),
                    'region'              => $address->getData('region'),
                    'region_id'           => '',
                    'postcode'            => $address->getData('postcode'),
                    'telephone'           => $address->getData('phone'),
                    'fax'                 => $address->getData('secondary_phone'),
                ]
            ]
        ];
        
        $this->merge($data);
        
        return $this;
    }
    
    
    /**
     * Retrieve order create model
     *
     * @return  Mage_Adminhtml_Model_Sales_Order_Create
     */
    protected function getOrderCreateModel()
    {
        /** @var Mage_Adminhtml_Model_Sales_Order_Create $create */
        $create = Mage::getSingleton('adminhtml/sales_order_create');
        
        return $create;
    }
    
    
    /**
     * Retrieve session object
     *
     * @return Mage_Adminhtml_Model_Session_Quote
     */
    protected function getSession()
    {
        /** @var Mage_Adminhtml_Model_Session_Quote $session */
        $session = Mage::getSingleton('adminhtml/session_quote');
        
        return $session;
    }
    
    
    /**
     * Initialize order creation session data
     *
     * @param array $data
     *
     * @return $this
     */
    protected function initSession($data)
    {
        /* Get/identify customer */
        if (!empty($data['customer_id'])) {
            $this->getSession()->setCustomerId((int) $data['customer_id']);
        }
        
        /* Get/identify store */
        if (!empty($data['store_id'])) {
            $this->getSession()->setStoreId((int) $data['store_id']);
        }
        
        return $this;
    }
    
    
    /**
     * Creates order
     */
    public function create()
    {
        $orderData = $this->orderData;
        
        if (!empty($orderData)) {
            
            $this->initSession($orderData['session']);
            
            try {
                $this->processQuote($orderData);
                if (!empty($orderData['payment'])) {
                    $this->getOrderCreateModel()->setPaymentData($orderData['payment']);
                    $this->getOrderCreateModel()->getQuote()->getPayment()->addData($orderData['payment']);
                }
                
                /** This can be necessary. */
                // $this->processProductOptions();
                
                Mage::app()->getStore()->setConfig(Mage_Sales_Model_Order::XML_PATH_EMAIL_ENABLED, "0");
                
                /** @var Mage_Sales_Model_Order $order */
                $order = $this->getOrderCreateModel()
                              ->importPostData($orderData['order'])
                              ->createOrder();
                
                $this->getSession()->clear();
                Mage::unregister('rule_data');
                
                return $order;
            } catch (Exception $e) {
                Mage::log("Order save error...");
            }
        }
        
        return null;
    }
    
    
    /**
     * @return $this
     */
    protected function processProductOptions()
    {
        /**
         * @var int                        $productId
         * @var Mage_Catalog_Model_Product $product
         */
        foreach ($this->products as $productId => $product) {
            $item = $this->getOrderCreateModel()->getQuote()->getItemByProduct($product);
    
            $options = [
                [
                    'product' => $product,
                    'code'    => 'option_ids',
                    'value'   => '5',
                    // Option id goes here. If more options, then comma separate
                ], [
                    'product' => $product,
                    'code'    => 'option_5',
                    'value'   => 'Some value here',
                ]
            ];
            
            /** @var array $option */
            foreach ($options as $option) {
                $item->addOption(new Varien_Object($option));
            }
        }
        
        return $this;
    }
    
    
    /**
     * @param array $data
     *
     * @return $this
     */
    protected function processQuote($data = array())
    {
        /* Saving order data */
        if (!empty($data['order'])) {
            $orderData = $data['order'];
            
            $this->getOrderCreateModel()->importPostData($orderData);
            $this->getOrderCreateModel()->getQuote()->setReservedOrderId($orderData['increment_id']);
        }
        
        $this->getOrderCreateModel()->getBillingAddress();
        $this->getOrderCreateModel()->setShippingAsBilling(true);
        
        /* Just like adding products from Magento admin grid */
        if (!empty($data['products'])) {
            $this->getOrderCreateModel()->addProducts($data['products']);
        }
        
        /* Collect shipping rates */
        $this->getOrderCreateModel()->collectShippingRates();
        
        /* Add payment data */
        if (!empty($data['payment'])) {
            $this->getOrderCreateModel()->getQuote()->getPayment()->addData($data['payment']);
        }
        
        $this->getOrderCreateModel()
             ->initRuleData()
             ->saveQuote();
        
        if (!empty($data['payment'])) {
            $this->getOrderCreateModel()->getQuote()->getPayment()->addData($data['payment']);
        }
        
        return $this;
    }
    
    
    /**
     * @param array $data
     *
     * @return $this
     */
    protected function merge(array $data = [])
    {
        $this->orderData = array_merge_recursive($this->orderData, $data);
        
        return $this;
    }
    
    
    /**
     * @return Mage_Core_Model_Store
     *
     * @throws Mage_Core_Model_Store_Exception
     */
    protected function getStore($store = null)
    {
        if (empty($store)) {
            $store = null;
        }
        
        if (!$this->store) {
            $this->store = Mage::app()->getStore($store);
        }
        
        return $this->store;
    }
}
