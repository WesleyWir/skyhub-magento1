<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BSeller
 * @package   BSeller_SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 */

class BSeller_SkyHub_Model_Cron_Sales_Order extends BSeller_SkyHub_Model_Cron_Abstract
{

    use BSeller_Core_Trait_Data,
        BSeller_SkyHub_Trait_Customer,
        BSeller_SkyHub_Trait_Service;


    /**
     * @param Mage_Cron_Model_Schedule $schedule
     */
    public function importOrders(Mage_Cron_Model_Schedule $schedule)
    {
        if (!$this->canRun()) {
            return;
        }

        $mock = '{
          "total": 1,
          "orders": [
            {
              "updated_at": "2018-02-12T19:23:48-02:00",
              "total_ordered": 123.45,
              "sync_status": "NOT_SYNCED",
              "status": {
                "type": "NEW",
                "label": "Pagamento Pendente (SkyHub)",
                "code": "book_product"
              },
              "shipping_method": "Correios PAC",
              "shipping_cost": 0,
              "shipping_address": {
                "street": "Rua Sacadura Cabral",
                "secondary_phone": "21 3722-3902",
                "region": "RJ",
                "reference": null,
                "postcode": "20081262",
                "phone": "21 3722-3902",
                "number": "130",
                "neighborhood": "Centro",
                "full_name": "Bruno santos",
                "detail": "foo",
                "country": "BR",
                "city": "Rio de Janeiro"
              },
              "shipments": [],
              "placed_at": "2018-02-12T19:23:48-02:00",
              "payments": [
                {
                  "value": 0,
                  "status": null,
                  "parcels": 1,
                  "method": "skyhub_payment",
                  "description": "Skyhub"
                }
              ],
              "items": [
                {
                  "special_price": 0,
                  "qty": 1,
                  "product_id": "PS4SLIM",
                  "original_price": 55.22,
                  "name": "Console Playstation 4 Slim 500GB",
                  "id": "PS4SLIM"
                }
              ],
              "invoices": [],
              "interest": 0,
              "import_info": {
                "remote_id": null,
                "remote_code": "1518470628274"
              },
              "estimated_delivery_shift": null,
              "estimated_delivery": "2018-02-10T22:00:00-02:00",
              "discount": 0,
              "customer": {
                "vat_number": "78732371683",
                "phones": [
                  "21 3722-3902",
                  "21 3722-3902"
                ],
                "name": "Bruno santos",
                "gender": "male",
                "email": "exemplo@skyhub.com.br",
                "date_of_birth": "1998-01-25"
              },
              "code": "TESTE-'.Mage::helper('core')->getRandomString(15, '1234567890').'",
              "channel": "Teste",
              "calculation_type": null,
              "billing_address": {
                "street": "Rua Fidencio Ramos",
                "secondary_phone": "21 3722-3902",
                "region": "RJ",
                "reference": null,
                "postcode": "04551101",
                "phone": "21 3722-3902",
                "number": "302",
                "neighborhood": "Centro",
                "full_name": "Bruno santos",
                "detail": "foo",
                "country": "BR",
                "city": "Rio de Janeiro"
              }
            }
          ]
        }';

        /** @var \SkyHub\Api\EntityInterface\Sales\Order\Queue $interface */
        // $interface = $this->api()->queue()->entityInterface();
        // $interface->orders();

        /** @var array $order */
        $orders = json_decode($mock, true);
        
        if (!isset($orders['orders'])) {
            return;
        }

        /** @var array $order */
        foreach ($orders['orders'] as $orderData) {
            $info = new Varien_Object([
                'increment_id'      => 'SKYHUB-'.$orderData['code'],
                'send_confirmation' => 0
            ]);
            
            $billingAddress  = new Varien_Object($orderData['billing_address']);
            $shippingAddress = new Varien_Object($orderData['shipping_address']);
    
            /** @var Mage_Customer_Model_Customer $customer */
            $customer  = $this->getCustomer($orderData['customer']);
            
            /** @var BSeller_SkyHub_Model_Support_Sales_Order_Create $creation */
            $creation = Mage::getModel('bseller_skyhub/support_sales_order_create', $this->getStore());
            $creation->setOrderInfo($info)
                     ->setCustomer($customer)
                     ->setShippingMethod('flatrate_flatrate')
                     ->setPaymentMethod('checkmo')
                     ->addOrderAddress('billing', $billingAddress)
                     ->addOrderAddress('shipping', $shippingAddress)
                     ->setComment('This order was automatically created by SkyHub import process.')
            ;
            
            $products = $this->getProducts((array) $orderData['items']);
            
            if (empty($products)) {
                continue;
            }
            
            /** @var Mage_Catalog_Model_Product $product */
            foreach ($products as $product) {
                $creation->addProduct($product);
            }
    
            /** @var Mage_Sales_Model_Order $order */
            $order = $creation->create();
        }
    }
    
    
    /**
     * @param array $items
     *
     * @return array
     */
    protected function getProducts(array $items)
    {
        $products = [];
    
        foreach ($items as $item) {
            $sku = $item['product_id'];
        
            /** @var Mage_Catalog_Model_Product $product */
            $product   = Mage::getModel('catalog/product');
            $productId = (int) $product->getResource()->getIdBySku($sku);
        
            if (!$productId) {
                continue;
            }
        
            $product->load($productId);
        
            $products[] = $product;
        }
        
        return $products;
    }


    /**
     * @param array                  $data
     *
     * @return Mage_Customer_Model_Customer
     *
     * @throws Exception
     */
    protected function getCustomer(
        array $data,
        Varien_Object $billingAddress = null,
        Varien_Object $shippingAddress = null
    )
    {
        $email = $data['email'];

        /** @var Mage_Customer_Model_Customer $customer */
        $customer = Mage::getModel('customer/customer');
        $customer->setStore($this->getStore());
        $customer->loadByEmail($email);

        if (!$customer->getId()) {
            $data['billing_address'] = $billingAddress;
            $data['shipping_address'] = $shippingAddress;
            
            $this->createCustomer($data, $customer);
        }
        
        return $customer;
    }
    
    
    /**
     * @param array                        $data
     * @param Mage_Customer_Model_Customer $customer
     *
     * @return Mage_Customer_Model_Customer
     *
     * @throws Exception
     * @throws Mage_Core_Model_Store_Exception
     */
    protected function createCustomer(array $data, Mage_Customer_Model_Customer $customer)
    {
        $customer->setStore(Mage::app()->getStore());

        $dateOfBirth = $data['date_of_birth'];
        $email       = $data['email'];
        $gender      = $data['gender'];
        $name        = $data['name'];
        $vatNumber   = $data['vat_number'];
        $phones      = $data['phones'];

        /** @var Varien_Object $nameObject */
        $nameObject = $this->breakName($name);

        $customer->setFirstname($nameObject->getData('firstname'));
        $customer->setLastname($nameObject->getData('lastname'));
        $customer->setMiddlename($nameObject->getData('middlename'));
        $customer->setEmail($email);
        $customer->setDob($dateOfBirth);
        $customer->setTaxvat($vatNumber);

        /** @var string $phone */
        foreach ($phones as $phone) {
            $customer->setTelephone($phone);
            break;
        }

        switch ($gender) {
            case 'male':
                $customer->setGender(1);
                break;
            case 'female':
                $customer->setGender(2);
                break;
        }
    
        $customer->save();
        
        /** @var Varien_Object $billing */
        if ($billing = $data['billing_address']) {
            $address = $this->createCustomerAddress($billing);
            $address->setCustomer($customer);
        }
        
        /** @var Varien_Object $billing */
        if ($shipping = $data['shipping_address']) {
            $address = $this->createCustomerAddress($shipping);
            $address->setCustomer($customer);
        }

        return $customer;
    }
    
    
    /**
     * @param Varien_Object $addressObject
     *
     * @return Mage_Customer_Model_Address
     */
    protected function createCustomerAddress(Varien_Object $addressObject)
    {
        /** @var Mage_Customer_Model_Address $address */
        $address = Mage::getModel('customer/address');
    
        /**
         * @todo Create customer address algorithm based on $addressObject.
         */
        
        return $address;
    }


    /**
     * @return Mage_Core_Model_Store
     */
    protected function getStore()
    {
        return Mage::app()->getDefaultStoreView();
    }

}
