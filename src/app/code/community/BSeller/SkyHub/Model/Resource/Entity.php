<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  BSeller
 * @package   BSeller_SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 */

class BSeller_SkyHub_Model_Resource_Entity extends BSeller_Core_Model_Resource_Abstract
{

    protected function _construct()
    {
        $this->_init('bseller_skyhub/entity_id', 'id');
    }


    /**
     * @param integer $entityId
     * @param string  $entityType
     * @param int     $storeId
     *
     * @return bool
     */
    public function createEntity($entityId, $entityType, $storeId = 0)
    {
        $entityExists = $this->entityExists($entityId, $entityType);

        if ($entityExists) {
            return false;
        }

        try {
            $this->beginTransaction();
            $this->_getWriteAdapter()->insert($this->getMainTable(), [
                'entity_id'   => (int)    $entityId,
                'entity_type' => (string) $entityType,
                'store_id'    => (int)    Mage::app()->getStore($storeId)->getId(),
                'created_at'  => now(),
            ]);
            $this->commit();

            return true;
        } catch (Exception $e) {
            Mage::logException($e);
            $this->rollBack();
        }

        return false;
    }


    /**
     * @param integer $entityId
     * @param string  $entityType
     * @param integer $storeId
     *
     * @return bool|string
     */
    public function entityExists($entityId, $entityType, $storeId = 0)
    {
        /** @var Varien_Db_Select $select */
        $select = $this->getReadConnection()
            ->select()
            ->from($this->getMainTable(), 'entity_id')
            ->where('entity_id = ?', (int) $entityId)
            ->where('entity_type = ?', (string) $entityType)
            ->where('store_id = ?', (int) Mage::app()->getStore($storeId)->getId())
            ->limit(1);

        try {
            $result = $this->getReadConnection()->fetchOne($select);

            if ($result) {
                return (int) $result;
            }
        } catch (Exception $e) {
            Mage::logException($e);
        }

        return false;
    }
}
